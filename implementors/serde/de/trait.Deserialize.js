(function() {var implementors = {};
implementors["bitbucket"] = [{"text":"impl&lt;'de&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.114/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"bitbucket/model/struct.Link.html\" title=\"struct bitbucket::model::Link\">Link</a>","synthetic":false,"types":["bitbucket::repository::Link"]},{"text":"impl&lt;'de&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.114/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"bitbucket/model/struct.RepositoryLinks.html\" title=\"struct bitbucket::model::RepositoryLinks\">RepositoryLinks</a>","synthetic":false,"types":["bitbucket::repository::RepositoryLinks"]},{"text":"impl&lt;'de&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.114/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"enum\" href=\"bitbucket/model/enum.Scm.html\" title=\"enum bitbucket::model::Scm\">Scm</a>","synthetic":false,"types":["bitbucket::repository::Scm"]},{"text":"impl&lt;'de&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.114/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"enum\" href=\"bitbucket/model/enum.ForkPolicy.html\" title=\"enum bitbucket::model::ForkPolicy\">ForkPolicy</a>","synthetic":false,"types":["bitbucket::repository::ForkPolicy"]},{"text":"impl&lt;'de&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.114/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"enum\" href=\"bitbucket/model/enum.ObjectType.html\" title=\"enum bitbucket::model::ObjectType\">ObjectType</a>","synthetic":false,"types":["bitbucket::repository::ObjectType"]},{"text":"impl&lt;'de&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.114/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"bitbucket/model/struct.ShortLinks.html\" title=\"struct bitbucket::model::ShortLinks\">ShortLinks</a>","synthetic":false,"types":["bitbucket::repository::ShortLinks"]},{"text":"impl&lt;'de&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.114/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"bitbucket/model/struct.Project.html\" title=\"struct bitbucket::model::Project\">Project</a>","synthetic":false,"types":["bitbucket::repository::Project"]},{"text":"impl&lt;'de&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.114/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"bitbucket/model/struct.Owner.html\" title=\"struct bitbucket::model::Owner\">Owner</a>","synthetic":false,"types":["bitbucket::repository::Owner"]},{"text":"impl&lt;'de&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.114/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"bitbucket/model/struct.Repository.html\" title=\"struct bitbucket::model::Repository\">Repository</a>","synthetic":false,"types":["bitbucket::repository::Repository"]},{"text":"impl&lt;'de&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.114/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"bitbucket/model/struct.Branch.html\" title=\"struct bitbucket::model::Branch\">Branch</a>","synthetic":false,"types":["bitbucket::repository::Branch"]},{"text":"impl&lt;'de&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.114/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"enum\" href=\"bitbucket/model/enum.Role.html\" title=\"enum bitbucket::model::Role\">Role</a>","synthetic":false,"types":["bitbucket::repository::Role"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()